{
  "manifest_version": "2",
  "task_list": [
    {
      "name": "Measure Features",
      "executable_parallel": "tasks/measure_features.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 3750
      },
      "args_schema_parallel": {
        "title": "MeasureFeatures",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Missing description"
          },
          "label_image_name": {
            "title": "Label Image Name",
            "type": "string",
            "description": "Name of the label image that contains the seeds. Needs to exist in OME-Zarr file. ROI_table_name: Name of the ROI table to process. output_table_name: Name of the feature table."
          },
          "ROI_table_name": {
            "title": "Roi Table Name",
            "type": "string",
            "description": "Missing description"
          },
          "output_table_name": {
            "title": "Output Table Name",
            "type": "string",
            "description": "Missing description"
          },
          "channels_to_include": {
            "title": "Channels To Include",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChannelInputModel"
            },
            "description": "List of channels to include for intensity and texture measurements. Use the channel label to indicate single channels. If None, all channels are included."
          },
          "channels_to_exclude": {
            "title": "Channels To Exclude",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChannelInputModel"
            },
            "description": "List of channels to exclude for intensity and texture measurements. Use the channel label to indicate single channels. If None, no channels are excluded."
          },
          "measure_intensity": {
            "title": "Measure Intensity",
            "default": false,
            "type": "boolean",
            "description": "If True, calculate intensity features."
          },
          "measure_morphology": {
            "title": "Measure Morphology",
            "default": false,
            "type": "boolean",
            "description": "If True, calculate morphology features."
          },
          "measure_texture": {
            "title": "Measure Texture",
            "default": {
              "haralick": false,
              "laws_texture_energy": false,
              "clip_value": 5000,
              "clip_value_exceptions": {}
            },
            "allOf": [
              {
                "$ref": "#/definitions/TextureFeatures"
              }
            ],
            "description": "Select which texture features should be calculated."
          },
          "measure_population": {
            "title": "Measure Population",
            "default": false,
            "type": "boolean",
            "description": "If True, calculate population features."
          },
          "calculate_internal_borders": {
            "title": "Calculate Internal Borders",
            "default": false,
            "type": "boolean",
            "description": "For a typical experiment this should not be selected. If True, calculate internal borders (whether an object touches or overlaps with a FOV border). This is only useful if you registered by well and want to remove objects that are on the border of a FOV. IMPORTANT: This only catches objects that are on the border of FOVs in cycle 1 of a multiplexed experiment."
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to calculate features. Only tested for level 0."
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "If True, overwrite existing feature table."
          }
        },
        "required": [
          "zarr_url",
          "label_image_name",
          "ROI_table_name",
          "output_table_name"
        ],
        "additionalProperties": false,
        "definitions": {
          "ChannelInputModel": {
            "title": "ChannelInputModel",
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel."
              }
            }
          },
          "TextureFeatures": {
            "title": "TextureFeatures",
            "description": "Validator to handle texture feature selection.",
            "type": "object",
            "properties": {
              "haralick": {
                "title": "Haralick",
                "default": false,
                "type": "boolean"
              },
              "laws_texture_energy": {
                "title": "Laws Texture Energy",
                "default": false,
                "type": "boolean"
              },
              "clip_value": {
                "title": "Clip Value",
                "default": 5000,
                "type": "integer"
              },
              "clip_value_exceptions": {
                "title": "Clip Value Exceptions",
                "default": {},
                "type": "object",
                "additionalProperties": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "docs_info": "## measure_features\nCalculate features based on label image and intensity image (optional).\n\nTakes a label image and an optional intensity image and calculates\nmorphology, intensity and texture features in 2D.\n"
    },
    {
      "name": "Segment Secondary Objects",
      "executable_non_parallel": "tasks/init_segment_secondary_objects.py",
      "executable_parallel": "tasks/segment_secondary_objects.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 3750
      },
      "args_schema_non_parallel": {
        "title": "InitSegmentSecondaryObjects",
        "type": "object",
        "properties": {
          "zarr_urls": {
            "title": "Zarr Urls",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "channel_label": {
            "title": "Channel Label",
            "type": "string",
            "description": "Label of the intensity image used for watershed. Needs to exist in OME-Zarr file."
          },
          "label_name": {
            "title": "Label Name",
            "type": "string",
            "description": "Name of the label image that contains the seeds. Needs to exist in OME-Zarr file."
          },
          "mask": {
            "title": "Mask",
            "type": "string",
            "description": "label image to use as mask. Only areas where the mask is non-zero will be considered for the watershed."
          },
          "output_label_image_name": {
            "title": "Output Label Image Name",
            "default": "0",
            "type": "string",
            "description": "Name of the zarr image that will contain the secondary segmentation. Defaults to \"0\". In case you saved, for example, illumination corrected images in the same zarr without overwriting the original images, you can specify a different name here (e.g. \"0_illum_corrected\")."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "channel_label",
          "label_name"
        ],
        "additionalProperties": false
      },
      "args_schema_parallel": {
        "title": "SegmentSecondaryObjects",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/definitions/InitArgsSegmentSecondary",
            "title": "Init_Args",
            "description": "Intialization arguments provided by `init_segment_secondary_objects`."
          },
          "ROI_table_name": {
            "title": "Roi Table Name",
            "type": "string",
            "description": "Name of the table containing the ROIs."
          },
          "min_threshold": {
            "title": "Min Threshold",
            "type": "integer",
            "description": "Minimum threshold for the background definition."
          },
          "max_threshold": {
            "title": "Max Threshold",
            "type": "integer",
            "description": "Maximum threshold for the background definition."
          },
          "gaussian_blur": {
            "title": "Gaussian Blur",
            "type": "integer",
            "description": "Sigma for gaussian blur."
          },
          "fill_holes_area": {
            "title": "Fill Holes Area",
            "type": "integer",
            "description": "Area threshold for filling holes after watershed."
          },
          "contrast_threshold": {
            "title": "Contrast Threshold",
            "default": 5,
            "type": "integer",
            "description": "Contrast threshold for background definition."
          },
          "output_label_name": {
            "title": "Output Label Name",
            "type": "string",
            "description": "Name of the output label image."
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to calculate overlap. Only tested for level 0."
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "If True, overwrite existing label image."
          }
        },
        "required": [
          "zarr_url",
          "init_args",
          "ROI_table_name",
          "output_label_name"
        ],
        "additionalProperties": false,
        "definitions": {
          "InitArgsSegmentSecondary": {
            "title": "InitArgsSegmentSecondary",
            "description": "Segment Secondary HCS Plate init args.",
            "type": "object",
            "properties": {
              "label_name": {
                "title": "Label Name",
                "type": "string"
              },
              "label_zarr_url": {
                "title": "Label Zarr Url",
                "type": "string"
              },
              "channel_label": {
                "title": "Channel Label",
                "type": "string"
              },
              "channel_zarr_url": {
                "title": "Channel Zarr Url",
                "type": "string"
              },
              "mask": {
                "title": "Mask",
                "type": "string"
              },
              "mask_zarr_url": {
                "title": "Mask Zarr Url",
                "type": "string"
              }
            },
            "required": [
              "label_name",
              "label_zarr_url",
              "channel_label",
              "channel_zarr_url"
            ]
          }
        }
      },
      "docs_info": "## init_segment_secondary_objects\nInitialized secondary segmentation task\n\nCriteria:\n- Works for multiplexing & non-multiplexing\n- \n\nOption 1:\nAsk user for path for output_label_image_name => defaults tricky, but fully flexible\nBetter: Optional\n\nOption 2:\nAlways put output label in same image as label_image_name => downside: Confusing why label would go there\n\nOption 3:\nAlways put output label in same image as channel => downside: Confusing why label would go there\n\nOption 4:\nOptional acquisition parameter, used only in multiplexing case, determines where output image goes\n=> overkill for the moment\n\n\nThis task prepares a parallelization list of all zarr_urls that need to be\nused to perform secondary segmentation based on a channel image and\na label image.\n## segment_secondary_objects\nSegments secondary objects based on primary labels and intensity image.\n\nTakes a primary label image and an intensity image and calculates secondary\nlabels based on watershed segmentation.\n"
    },
    {
      "name": "Convert IC600 to OME-Zarr",
      "executable_non_parallel": "tasks/init_convert_IC6000_to_ome_zarr.py",
      "executable_parallel": "tasks/convert_IC6000_to_ome_zarr.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 3750
      },
      "args_schema_non_parallel": {
        "title": "InitConvertIc6000ToOmeZarr",
        "type": "object",
        "properties": {
          "zarr_urls": {
            "title": "Zarr Urls",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Missing description"
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "Missing description"
          },
          "acquisitions": {
            "title": "Acquisitions",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/definitions/MultiplexingAcquisition"
            },
            "description": "dictionary of acquisitions. Each key is the acquisition identifier (normally 0, 1, 2, 3 etc.). Each item defines the acquisition by providing the image_dir and the allowed_channels."
          },
          "image_glob_patterns": {
            "title": "Image Glob Patterns",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If specified, only parse images with filenames that match with all these patterns. Patterns must be defined as in https://docs.python.org/3/library/fnmatch.html, Example: `image_glob_pattern=[\"*B - 03*\"]` => only process well B03 `image_glob_pattern=[\"*C - 09*\", \"*fld 16*\"]` => only process well C09, field of view 16."
          },
          "num_levels": {
            "title": "Num Levels",
            "default": 5,
            "type": "integer",
            "description": "Number of resolution-pyramid levels. If set to `5`, there will be the full-resolution level and 4 levels of downsampled images."
          },
          "coarsening_xy": {
            "title": "Coarsening Xy",
            "default": 2,
            "type": "integer",
            "description": "Linear coarsening factor between subsequent levels. If set to `2`, level 1 is 2x downsampled, level 2 is 4x downsampled etc."
          },
          "image_extension": {
            "title": "Image Extension",
            "default": "tif",
            "type": "string",
            "description": "Filename extension of images (e.g. `\"tif\"` or `\"png\"`)."
          },
          "overwrite": {
            "title": "Overwrite",
            "default": false,
            "type": "boolean",
            "description": "If `True`, overwrite the task output."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "acquisitions"
        ],
        "additionalProperties": false,
        "definitions": {
          "Window": {
            "title": "Window",
            "description": "Custom class for Omero-channel window, based on OME-NGFF v0.4.",
            "type": "object",
            "properties": {
              "min": {
                "title": "Min",
                "type": "integer",
                "description": "Do not change. It will be set to `0` by default."
              },
              "max": {
                "title": "Max",
                "type": "integer",
                "description": "Do not change. It will be set according to bit-depth of the images by default (e.g. 65535 for 16 bit images)."
              },
              "start": {
                "title": "Start",
                "type": "integer",
                "description": "Lower-bound rescaling value for visualization."
              },
              "end": {
                "title": "End",
                "type": "integer",
                "description": "Upper-bound rescaling value for visualization."
              }
            },
            "required": [
              "start",
              "end"
            ]
          },
          "OmeroChannel": {
            "title": "OmeroChannel",
            "description": "Custom class for Omero channels, based on OME-NGFF v0.4.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`."
              },
              "index": {
                "title": "Index",
                "type": "integer",
                "description": "Do not change. For internal use only."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel."
              },
              "window": {
                "$ref": "#/definitions/Window",
                "title": "Window",
                "description": "Optional `Window` object to set default display settings for napari."
              },
              "color": {
                "title": "Color",
                "type": "string",
                "description": "Optional hex colormap to display the channel in napari (it must be of length 6, e.g. `00FFFF`)."
              },
              "active": {
                "title": "Active",
                "default": true,
                "type": "boolean",
                "description": "Should this channel be shown in the viewer?"
              },
              "coefficient": {
                "title": "Coefficient",
                "default": 1,
                "type": "integer",
                "description": "Do not change. Omero-channel attribute."
              },
              "inverted": {
                "title": "Inverted",
                "default": false,
                "type": "boolean",
                "description": "Do not change. Omero-channel attribute."
              }
            },
            "required": [
              "wavelength_id"
            ]
          },
          "MultiplexingAcquisition": {
            "title": "MultiplexingAcquisition",
            "description": "Input class for Multiplexing Cellvoyager converter",
            "type": "object",
            "properties": {
              "image_dir": {
                "title": "Image Dir",
                "type": "string",
                "description": "Path to the folder that contains the Cellvoyager image files for that acquisition and the MeasurementData & MeasurementDetail metadata files."
              },
              "allowed_channels": {
                "title": "Allowed Channels",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/OmeroChannel"
                },
                "description": "A list of `OmeroChannel` objects, where each channel must include the `wavelength_id` attribute and where the `wavelength_id` values must be unique across the list."
              }
            },
            "required": [
              "image_dir",
              "allowed_channels"
            ]
          }
        }
      },
      "args_schema_parallel": {
        "title": "ConvertIc6000ToOmeZarr",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/definitions/InitArgsIC6000",
            "title": "Init_Args",
            "description": "Intialization arguments provided by `init_convert_IC600_to_ome_zarr`."
          }
        },
        "required": [
          "zarr_url",
          "init_args"
        ],
        "additionalProperties": false,
        "definitions": {
          "InitArgsIC6000": {
            "title": "InitArgsIC6000",
            "description": "Arguments to be passed from IC6000 converter init to compute",
            "type": "object",
            "properties": {
              "image_dir": {
                "title": "Image Dir",
                "type": "string"
              },
              "plate_prefix": {
                "title": "Plate Prefix",
                "type": "string"
              },
              "well_ID": {
                "title": "Well Id",
                "type": "string"
              },
              "image_extension": {
                "title": "Image Extension",
                "type": "string"
              },
              "image_glob_patterns": {
                "title": "Image Glob Patterns",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "acquisition": {
                "title": "Acquisition",
                "type": "integer"
              }
            },
            "required": [
              "image_dir",
              "plate_prefix",
              "well_ID",
              "image_extension"
            ]
          }
        }
      },
      "docs_info": "## init_convert_IC6000_to_ome_zarr\nCreate OME-NGFF structure and metadata to host a multiplexing dataset.\n\nThis task takes a set of image folders (i.e. different acquisition cycles)\nand build the internal structure and metadata of a OME-NGFF zarr group,\nwithout actually loading/writing the image data.\n\nEach element in input_paths should be treated as a different acquisition.\n## convert_IC6000_to_ome_zarr\nConvert IC6000 output (png, tif) to zarr file.\n\nThis task is run after \"init_convert_IC6000_to_ome_zarr\"\nand populates the empty OME-Zarr files that were prepared.\n"
    },
    {
      "name": "Label Assignment by Overlap",
      "executable_non_parallel": "tasks/init_label_assignment_by_overlap.py",
      "executable_parallel": "tasks/label_assignment_by_overlap.py",
      "meta_parallel": {
        "cpus_per_task": 1,
        "mem": 3750
      },
      "args_schema_non_parallel": {
        "title": "InitLabelAssignmentByOverlap",
        "type": "object",
        "properties": {
          "zarr_urls": {
            "title": "Zarr Urls",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of paths or urls to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "zarr_dir": {
            "title": "Zarr Dir",
            "type": "string",
            "description": "path of the directory where the new OME-Zarrs will be created. Not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "parent_label_name": {
            "title": "Parent Label Name",
            "type": "string",
            "description": "Name of the parent label."
          },
          "child_label_name": {
            "title": "Child Label Name",
            "type": "string",
            "description": "Name of the child label. This label will be assigned to the parent label based on overlap. The parent label will appear in the child feature table as the \"(parent_label_name)_label\" column in the obs table of the anndata table."
          }
        },
        "required": [
          "zarr_urls",
          "zarr_dir",
          "parent_label_name",
          "child_label_name"
        ],
        "additionalProperties": false
      },
      "args_schema_parallel": {
        "title": "LabelAssignmentByOverlap",
        "type": "object",
        "properties": {
          "zarr_url": {
            "title": "Zarr Url",
            "type": "string",
            "description": "Path or url to the individual OME-Zarr image to be processed. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "init_args": {
            "$ref": "#/definitions/InitArgsLabelAssignment",
            "title": "Init_Args",
            "description": "Intialization arguments provided by `init_label_assignment_by_overlap`."
          },
          "child_table_name": {
            "title": "Child Table Name",
            "type": "string",
            "description": "Name of the feature table associated with the child label image."
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to calculate overlap. Only tested for level 0."
          },
          "overlap_threshold": {
            "title": "Overlap Threshold",
            "default": 1.0,
            "type": "number",
            "description": "The minimum percentage (between 0 and 1) of child label object that must be contained in parent label object to be considered a match."
          }
        },
        "required": [
          "zarr_url",
          "init_args",
          "child_table_name"
        ],
        "additionalProperties": false,
        "definitions": {
          "InitArgsLabelAssignment": {
            "title": "InitArgsLabelAssignment",
            "description": "Arguments to be passed from Label Assignment init to compute",
            "type": "object",
            "properties": {
              "parent_label_name": {
                "title": "Parent Label Name",
                "type": "string"
              },
              "parent_label_zarr_url": {
                "title": "Parent Label Zarr Url",
                "type": "string"
              },
              "child_label_name": {
                "title": "Child Label Name",
                "type": "string"
              },
              "child_label_zarr_url": {
                "title": "Child Label Zarr Url",
                "type": "string"
              }
            },
            "required": [
              "parent_label_name",
              "parent_label_zarr_url",
              "child_label_name",
              "child_label_zarr_url"
            ]
          }
        }
      },
      "docs_info": "## init_label_assignment_by_overlap\nInitialized label assignment by overlap task\n\nThis task prepares a parallelization list of all zarr_urls that need to be\nused to perform label assignment based on overlap between two label images.\n## label_assignment_by_overlap\nAssign labels to each other based on overlap.\n\nTakes a parent label image and a child label image and calculates\noverlaps between their labels. Child labels will be assigned to parent\nlabels based on an overlap threshold.\n"
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v1"
}
