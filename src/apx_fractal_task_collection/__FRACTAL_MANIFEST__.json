{
  "manifest_version": "1",
  "task_list": [
    {
      "name": "Calculate Registration (image-based) [chi-squared shift]",
      "executable": "calculate_registration_image_based_chi_squared_shift.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 1,
        "mem": 8000,
        "parallelization_level": "image"
      },
      "args_schema": {
        "title": "CalculateRegistrationImageBasedChiSquaredShift",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: `[\"/some/path/\"]`. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: `\"some_plate.zarr/B/03/0\"`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "wavelength_id": {
            "title": "Wavelength Id",
            "type": "string",
            "description": "Wavelength that will be used for image-based registration; e.g. `A01_C01` for Yokogawa, `C01` for MD."
          },
          "roi_table": {
            "title": "Roi Table",
            "default": "FOV_ROI_table",
            "type": "string",
            "description": "Name of the ROI table over which the task loops to calculate the registration. Examples: `FOV_ROI_table` => loop over the field of views, `well_ROI_table` => process the whole well as one image."
          },
          "reference_cycle": {
            "title": "Reference Cycle",
            "default": 0,
            "type": "integer",
            "description": "Which cycle to register against. Defaults to 0, which is the first OME-Zarr image in the well (usually the first cycle that was provided)."
          },
          "level": {
            "title": "Level",
            "default": 2,
            "type": "integer",
            "description": "Pyramid level of the image to be segmented. Choose `0` to process at full resolution."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "wavelength_id"
        ],
        "additionalProperties": false
      },
      "docs_info": "Calculate registration based on images\n\nThis task consists of 3 parts:\n\n1. Loading the images of a given ROI (=> loop over ROIs)\n2. Calculating the transformation for that ROI\n3. Storing the calculated transformation in the ROI table\n\nParallelization level: image"
    },
    {
      "name": "Label Assignment by Overlap",
      "executable": "label_assignment_by_overlap.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "parallelization_level": "image"
      },
      "args_schema": {
        "title": "LabelAssignmentByOverlap",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: `[\"/some/path/\"]`. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path to the OME-Zarr image in the OME-Zarr plate that is processed. Example: `\"some_plate.zarr/B/03/0\"`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "dictionary containing metadata about the OME-Zarr. This task requires the following elements to be present in the metadata. `coarsening_xy (int)`: coarsening factor in XY of the downsampling when building the pyramid. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "parent_label_image": {
            "title": "Parent Label Image",
            "type": "string",
            "description": "Name of the parent label image. Needs to exist in OME-Zarr file."
          },
          "child_label_image": {
            "title": "Child Label Image",
            "type": "string",
            "description": "Name of the child label image. Needs to exist in OME-Zarr file."
          },
          "parent_label_cycle": {
            "title": "Parent Label Cycle",
            "type": "integer",
            "description": "indicates which cycle contains the parent label image (only needed if multiplexed)."
          },
          "child_label_cycle": {
            "title": "Child Label Cycle",
            "type": "integer",
            "description": "indicates which cycle contains the child label image (only needed if multiplexed)."
          },
          "child_table_name": {
            "title": "Child Table Name",
            "type": "string",
            "description": "Name of the feature table associated with the child label image."
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to calculate overlap. Only tested for level 0."
          },
          "overlap_threshold": {
            "title": "Overlap Threshold",
            "default": 1.0,
            "type": "number",
            "description": "The minimum percentage (between 0 and 1) of child label object that must be contained in parent label object to be considered a match."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "parent_label_image",
          "child_label_image",
          "child_table_name"
        ],
        "additionalProperties": false
      },
      "docs_info": "Assign labels to each other based on overlap.\n\nTakes a parent label image and a child label image and calculates\noverlaps between their labels. Child labels will be assigned to parent\nlabels based on an overlap threshold."
    },
    {
      "name": "Clip Label Image",
      "executable": "clip_label_image.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "parallelization_level": "image"
      },
      "args_schema": {
        "title": "ClipLabelImage",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Path to the parent folder of the NGFF image. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This argument is not used in this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path of the NGFF image, relative to `input_paths[0]`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This argument is not used in this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_image_name": {
            "title": "Label Image Name",
            "type": "string",
            "description": "Name of the label image to be clipped. Needs to exist in OME-Zarr file."
          },
          "clipping_mask_name": {
            "title": "Clipping Mask Name",
            "type": "string",
            "description": "Name of the label image used as mask for clipping. This image will be binarized. Needs to exist in OME-Zarr file."
          },
          "label_image_cycle": {
            "title": "Label Image Cycle",
            "type": "integer",
            "description": "indicates which cycle contains the label image (only needed if multiplexed)."
          },
          "clipping_mask_cycle": {
            "title": "Clipping Mask Cycle",
            "type": "integer",
            "description": "indicates which cycle contains the clipping mask image (only needed if multiplexed)."
          },
          "output_label_cycle": {
            "title": "Output Label Cycle",
            "type": "integer",
            "description": " indicates in which cycle to store the result (only needed if multiplexed)."
          },
          "output_label_name": {
            "title": "Output Label Name",
            "type": "string",
            "description": "Name of the output label image."
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to calculate overlap. Only tested for level 0."
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "If True, overwrite existing label image."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "label_image_name",
          "clipping_mask_name",
          "output_label_name"
        ],
        "additionalProperties": false
      },
      "docs_info": "Clips a label image with a mask.\n\nTakes two label images (or a label image and a binary mask) and replaces\nall values in the first label image with 0 where the second label image has\nvalues > 0."
    },
    {
      "name": "Segment Secondary Objects",
      "executable": "segment_secondary_objects.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 32000,
        "parallelization_level": "well"
      },
      "args_schema": {
        "title": "SegmentSecondaryObjects",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Path to the parent folder of the NGFF image. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This argument is not used in this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path of the NGFF image, relative to `input_paths[0]`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This argument is not used in this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_image_name": {
            "title": "Label Image Name",
            "type": "string",
            "description": "Name of the label image that contains the seeds. Needs to exist in OME-Zarr file."
          },
          "channel": {
            "$ref": "#/definitions/Channel",
            "title": "Channel",
            "description": "Name of the intensity image used for watershed. Needs to exist in OME-Zarr file."
          },
          "label_image_cycle": {
            "title": "Label Image Cycle",
            "type": "integer",
            "description": "indicates which cycle contains the label image (only needed if multiplexed)."
          },
          "intensity_image_cycle": {
            "title": "Intensity Image Cycle",
            "type": "integer",
            "description": "indicates which cycle contains the intensity image (only needed if multiplexed)."
          },
          "min_threshold": {
            "title": "Min Threshold",
            "type": "integer",
            "description": "Minimum threshold for the background definition."
          },
          "max_threshold": {
            "title": "Max Threshold",
            "type": "integer",
            "description": "Maximum threshold for the background definition."
          },
          "gaussian_blur": {
            "title": "Gaussian Blur",
            "type": "integer",
            "description": "Sigma for gaussian blur."
          },
          "fill_holes_area": {
            "title": "Fill Holes Area",
            "type": "integer",
            "description": "Area threshold for filling holes after watershed."
          },
          "contrast_threshold": {
            "title": "Contrast Threshold",
            "default": 5,
            "type": "integer",
            "description": "Contrast threshold for background definition."
          },
          "output_label_cycle": {
            "title": "Output Label Cycle",
            "type": "integer",
            "description": "indicates in which cycle to store the result (only needed if multiplexed)."
          },
          "output_label_name": {
            "title": "Output Label Name",
            "type": "string",
            "description": "Name of the output label image."
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to calculate overlap. Only tested for level 0."
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "If True, overwrite existing label image."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "label_image_name",
          "channel",
          "output_label_name"
        ],
        "additionalProperties": false,
        "definitions": {
          "Channel": {
            "title": "Channel",
            "description": "A channel which is specified by either `wavelength_id` or `label`.",
            "type": "object",
            "properties": {
              "wavelength_id": {
                "title": "Wavelength Id",
                "type": "string",
                "description": "Unique ID for the channel wavelength, e.g. `A01_C01`."
              },
              "label": {
                "title": "Label",
                "type": "string",
                "description": "Name of the channel."
              }
            }
          }
        }
      },
      "docs_info": "Segments secondary objects based on primary labels and intensity image.\n\nTakes a primary label image and an intensity image and calculates secondary\nlabels based on watershed segmentation."
    },
    {
      "name": "Measure Features",
      "executable": "measure_features.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "parallelization_level": "image"
      },
      "args_schema": {
        "title": "MeasureFeatures",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Path to the parent folder of the NGFF image. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This argument is not used in this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path of the NGFF image, relative to `input_paths[0]`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This argument is not used in this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "label_image_name": {
            "title": "Label Image Name",
            "type": "string",
            "description": "Name of the label image that contains the seeds. Needs to exist in OME-Zarr file."
          },
          "label_image_cycle": {
            "title": "Label Image Cycle",
            "type": "integer",
            "description": "indicates which cycle contains the label image (only needed if multiplexed)."
          },
          "measure_intensity": {
            "title": "Measure Intensity",
            "default": false,
            "type": "boolean",
            "description": "If True, calculate intensity features."
          },
          "measure_morphology": {
            "title": "Measure Morphology",
            "default": false,
            "type": "boolean",
            "description": "If True, calculate morphology features."
          },
          "measure_texture": {
            "title": "Measure Texture",
            "default": false,
            "type": "boolean",
            "description": "If True, calculate texture features."
          },
          "output_table_name": {
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the feature table."
          },
          "level": {
            "title": "Level",
            "default": 0,
            "type": "integer",
            "description": "Resolution of the label image to calculate features. Only tested for level 0."
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "If True, overwrite existing label image."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "label_image_name"
        ],
        "additionalProperties": false
      },
      "docs_info": "Calculate features based on label image and intensity image (optional).\n\nTakes a label image and an optional intensity image and calculates morphology,\nintensity and texture features in 2D."
    },
    {
      "name": "Calculate Illumination Profiles",
      "executable": "calculate_illumination_profiles.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000
      },
      "args_schema": {
        "title": "CalculateIlluminationProfiles",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of input paths where the image data is stored as OME-Zarrs. Should point to the parent folder containing one or many OME-Zarr files, not the actual OME-Zarr file. Example: `[\"/some/path/\"]`. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "Path were the output of this task is stored. Examples: `\"/some/path/\"` => puts the new OME-Zarr file in the same folder as the input OME-Zarr file; `\"/some/new_path\"` => puts the new OME-Zarr file into a new folder at `/some/new_path`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This parameter is not used by this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "illumination_profiles_folder": {
            "title": "Illumination Profiles Folder",
            "type": "string",
            "description": "Path to folder where illumination profiles will be saved."
          },
          "n_images": {
            "title": "N Images",
            "default": 150,
            "type": "integer",
            "description": "Number of images to sample for illumination correction."
          },
          "overwrite": {
            "title": "Overwrite",
            "default": false,
            "type": "boolean",
            "description": "If True, overwrite existing illumination profiles."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "metadata",
          "illumination_profiles_folder"
        ],
        "additionalProperties": false
      },
      "docs_info": "Calculates illumination correction profiles based on a random sample\nof images of for each channel."
    },
    {
      "name": "Aggregate Tables to Well Level",
      "executable": "aggregate_tables_to_well_level.py",
      "input_type": "zarr",
      "output_type": "zarr",
      "meta": {
        "cpus_per_task": 4,
        "mem": 16000,
        "parallelization_level": "well"
      },
      "args_schema": {
        "title": "AggregateTablesToWellLevel",
        "type": "object",
        "properties": {
          "input_paths": {
            "title": "Input Paths",
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Path to the parent folder of the NGFF image. This task only supports a single input path. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "output_path": {
            "title": "Output Path",
            "type": "string",
            "description": "This argument is not used in this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "component": {
            "title": "Component",
            "type": "string",
            "description": "Path of the NGFF image, relative to `input_paths[0]`. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "description": "This argument is not used in this task. (standard argument for Fractal tasks, managed by Fractal server)."
          },
          "input_table_name": {
            "title": "Input Table Name",
            "type": "string",
            "description": "Name of the feature table."
          },
          "output_table_name": {
            "title": "Output Table Name",
            "type": "string",
            "description": "Name of the aggregated feature table."
          },
          "overwrite": {
            "title": "Overwrite",
            "default": true,
            "type": "boolean",
            "description": "If True, overwrite existing label image."
          }
        },
        "required": [
          "input_paths",
          "output_path",
          "component",
          "metadata",
          "input_table_name"
        ],
        "additionalProperties": false
      },
      "docs_info": "Aggregate acquisition (image) based features to the well level."
    }
  ],
  "has_args_schemas": true,
  "args_schema_version": "pydantic_v1"
}
